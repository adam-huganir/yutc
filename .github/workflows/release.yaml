# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches:
      - "main"
  label:
    types: [ created ]

jobs:
  go-test:
    name: Go Test
    uses: ./.github/workflows/test.yaml

  go-create-release:
    name: Go Create Release
    if: github.event_name == 'push' || github.event_name == 'label' && contains(github.event.label.name, 'release')
    needs:
      - go-test
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.25
      - name: find new version
        run: |-
          ersion="$(go run ./cmd/yutc --version)"
          version="v${ersion}"
          if [[ -n "$(git tag -l "$version")" ]]; then
            echo "::error::Version $version already exists"
            exit 1
          fi
          echo "YUTC_VERSION=$version" >> $GITHUB_OUTPUT
      - name: create release
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        run: |-
          gh release create --generate-notes "{{ env.YUTC_VERSION }}"

  go-build:
    name: Go Build
    if: github.event_name == 'push' || github.event_name == 'label' && contains(github.event.label.name, 'release')
    needs:
      - go-test
    strategy:
      matrix:
        matrix.os: [ ubuntu-latest, windows-latest, macOS-latest ]
        binary: [ yutc-linux-amd64, yutc-windows-amd64.exe, yutc-darwin-amd64 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.25
      - name: test new version unix
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
        id: version-unix
        run: |-
          ersion="$(go run ./cmd/yutc --version)"
          version="v${ersion}"
          if [[ -n "$(git tag -l "$version")" ]]; then
            echo "::error::Version $version already exists"
            exit 1
          fi
          echo "YUTC_VERSION=$version" >> $GITHUB_OUTPUT
      - name: test new version windows
        if: matrix.os == 'windows-latest'
        id: version-windows
        run: |-
          $ersion = go run ./cmd/yutc --version
          $version = "v$ersion"
          if (git tag -l $version) {
              Write-Host "::error::Version $version already exists"
              exit 1
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "YUTC_VERSION=$version"
      - name: build
        id: build
        run: |-
          binary_name="{{ matrix.binary }}"
          go build -o "./dist/${binary_name}" ./cmd/yutc
      - name: release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        run: |-
          gh release upload ${{ steps.version-unix.outputs.YUTC_VERSION || '' }}${{ steps.version-windows.outputs.YUTC_VERSION || '' }} "./dist/{{ matrix.binary }}"
